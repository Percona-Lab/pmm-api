syntax = "proto3";

package agent;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "inventory/agents.proto";

message RegisterRequest {
  // FIXME We need node information there to create a new node or map new agent to the existing node.
  //       This is hard problem.

  string hostname = 1;
}

message RegisterResponse {
  string uuid = 1;
}

message ConnectRequest {
  string uuid = 1;
  string version = 2;
}

message ConnectResponse {}

message QANDataRequest {
  google.protobuf.Any data = 1; // agent.QANData
}

message QANDataResponse {}

message PingRequest {}

message PingResponse {
  google.protobuf.Timestamp current_time = 1;
}

message SetStateRequest {
  repeated inventory.MySQLdExporter mysqld_exporters = 1;
}

message SetStateResponse {}

message AgentMessage {
  uint32 id = 1;
  oneof payload {
    // requests from agent
    ConnectRequest connect = 2;
    QANDataRequest qan_data = 3;
    // responses from agent
    PingResponse ping = 8;
    SetStateResponse state = 9;
  }
}

message ServerMessage {
  uint32 id = 1;
  oneof payload {
    // responses from server
    ConnectResponse connect = 2;
    QANDataResponse qan_data = 3;
    // requests from server
    PingRequest ping = 8;
    SetStateRequest state = 9;
  }
}

// Agent service provides private methods for pmm-agent <-> pmm-managed interactions.
service Agent {
  // Register adds pmm-agent to pmm-managed database and returns agent's UUID.
  rpc Register(RegisterRequest) returns (RegisterResponse);
  // Connect establishes two-way communication channel between pmm-agent and pmm-managed.
  rpc Connect(stream AgentMessage) returns (stream ServerMessage);
}
